/*
 * Copyright (c) 2016,2017 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
  }
}

plugins {
    id 'com.craigburke.karma' version '1.4.4'
}

apply from: '../common-java.gradle'
apply from: '../common-war.gradle'
apply plugin: "org.sonarqube"

dependencies {
    compile project(':liberty-starter-model')
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'org.eclipse.mylyn.github', name: 'org.eclipse.egit.github.core', version: '2.1.5'
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.5.0.201609210915-r'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.5.1'

    providedCompile group:'javax.servlet', name:'javax.servlet-api', version:'3.1.0'
    providedCompile group:'javax.ws.rs', name:'javax.ws.rs-api', version: '2.0'
    providedCompile group:'javax.json', name:'javax.json-api', version:'1.0'
    providedCompile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.4'
    providedCompile group: 'javax.enterprise', name: 'cdi-api', version: '1.2'
    providedCompile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.2'
    providedCompile group:'com.sebastian-daschner', name:'jaxrs-analyzer-maven-plugin', version:'0.9'
    providedCompile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.19'
    testCompile group: 'org.apache.maven', name: 'maven-embedder', version: '3.3.1'
    testCompile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
    
    testRuntime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.5'
    testRuntime group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version: '3.1.1'
    testRuntime group: 'org.glassfish', name: 'javax.json', version: '1.0.4'
    testRuntime group: 'org.eclipse.aether', name: 'aether-connector-basic', version: '1.1.0'
    testRuntime group: 'org.eclipse.aether', name: 'aether-transport-wagon', version: '1.1.0'
    testRuntime group: 'org.apache.maven.wagon', name: 'wagon-http', version: '2.10'
    testRuntime group: 'org.apache.maven.wagon', name: 'wagon-provider-api', version: '2.10'
	// Liberty maven plugin sets a system property to point logger to a class in here
    testRuntime group: 'org.codehaus.mojo', name: 'plugin-support', version: '1.0-alpha-1'
}

buildutils {
	contextRoot = '/start'
}

libertyutils {
    def envVars = 'com_ibm_liberty_starter_servicesJsonLocation=/testServices'
    if (project.hasProperty('bxCodegenEndpoint')) {
        envVars += ',bxCodegenEndpoint=' + bxCodegenEndpoint
    }
    if (project.hasProperty('appAccelStarterkit')) {
        envVars += ',appAccelStarterkit=' + appAccelStarterkit
    }
    serverEnv = envVars.split(',')
}

war {
    exclude '**/target'
    exclude '**/.project'
}

task testAvailability(type: Test) {
    group 'Verification'
    description 'Checks the application has started.'
    reports.html.destination = file("$buildDir/reports/availability")
    reports.junitXml.destination = file("$buildDir/test-results/availability")
    include '**/availability/**'
    exclude '**/it/**'
    exclude '**/unit/**'
    
    systemProperties = ['liberty.test.port': "${libertyApplicationTestPort}"]
    
    testLogging {
        events "started", "skipped", "failed"
        showStackTraces true
        showStandardStreams true
        exceptionFormat "full"
    }
}

task fvt(type: Test) {
    group 'Verification'
    description 'Runs the functional verification tests.'
    reports.html.destination = file("$buildDir/reports/it")
    reports.junitXml.destination = file("$buildDir/test-results/it")
    include '**/it/**'
    exclude '**/unit/**'

    systemProperties = ['liberty.test.port': "${libertyApplicationTestPort}",
                        'liberty.temp.dir': "${buildDir}/temp",
                        'gradleCommand': rootProject.file('gradlew').getAbsolutePath(),
                        'gitHubOauth': System.getProperty('gitHubOauth')]

    testLogging {
        events "started", "skipped", "failed"
        showStackTraces true
        showStandardStreams true
        exceptionFormat "full"
    }
}

test {
    systemProperties = ['liberty.temp.dir': "${buildDir}/temp"]
    reports.html.destination = file("$buildDir/reports/unit")
    reports.junitXml.destination = file("$buildDir/test-results/unit")
    include '**/unit/**'
    exclude '**/it/**'
}

task deployApp(dependsOn: 'fvt') {
    finalizedBy libertyStart
}

task cleanDropins (type: Delete){
    delete fileTree(dir: '../liberty-starter-wlpcfg/servers/StarterServer/dropins')
}

liberty {
    install {
        runtimeUrl = "http://repo1.maven.org/maven2/com/ibm/websphere/appserver/runtime/wlp-webProfile7/17.0.0.1/wlp-webProfile7-17.0.0.1.zip"
    }
    serverName = 'StarterServer'
    userDir = '../liberty-starter-wlpcfg'

    features {
        name = ['apiDiscovery-1.0']
        acceptLicense = true
    }

    packageLiberty {
        include = 'usr'
        archive = 'build/libs/WebSphereArtisanLiberty.zip'
    }
}

task localRun (type: net.wasdev.wlp.gradle.plugins.tasks.StartTask){
    description 'Starts the WebSphere Liberty Profile server without the test WAR.'
    logging.level = LogLevel.INFO
}

// Can't access project properties in the karma configuration so set variables here
def rootDirectory = project.projectDir.getAbsolutePath()
def testResultsDir = new File(buildDir, "karmaResults")

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name == "testAvailability" && state.failure) {
        println '***FVT JUNIT LOGS***'
        printDirectory(task.reports.junitXml.destination)
        println '***FVT JUNIT LOGS END***'
        println '***SERVER LOGS***'
        printFile(file('../liberty-starter-wlpcfg/servers/StarterServer/logs/messages.log'))
        println '***SERVER LOGS END***'
    }
    if (task.name == "fvt" && state.failure) {
        println '***FVT JUNIT LOGS***'
        printDirectory(task.reports.junitXml.destination)
        println '***FVT JUNIT LOGS END***'
        println '***SERVER LOGS***'
        printFile(file('../liberty-starter-wlpcfg/servers/StarterServer/logs/messages.log'))
        println '***SERVER LOGS END***'
        printFile(file("${buildDir}/temp/localGradlePayloadTest/gradleLog/log.txt"))
        printFile(file("${buildDir}/temp/localPayloadTest/mvnLog/log.txt"))
        printFile(file("${buildDir}/temp/localPayloadTest/mvnLog/stopServer.txt"))
    }
    if (task.name == "karmaRun" && state.failure) {
        println '***KARMA RUN JUNIT REPORT***'
        printDirectory(testResultsDir)
    }
}

def printDirectory(dir) {
    if (dir.exists()) {
        dir.eachFile {child ->
            if (child.isDirectory()) {
                printDirectory(child)
            } else {
                printFile(child)
            }
        }
    }
}

def printFile(file) {
    println "***PRINTING FILE: ${file.getAbsolutePath()}"
    if (file.exists()) {
        println file.text
    } else {
        println 'File does not exist'
    }
    println '***END OF FILE'
}

karma {
    basePath = "$rootDirectory"
    sourceBases = ['src/main/webapp/js']
    testBases = ['src/test/js']
    frameworks = ['jasmine']
    dependencies(['angular', 'angular-mocks'])
    reporters = ['junit']
    files = ['node_modules/angular/angular.min.js',
             'node_modules/angular-mocks/angular-mocks.js',
             'src/main/webapp/js/**/*.js',
             'src/test/js/**/*.js']
    logLevel = 'INFO'
    junitReporter = [ outputDir: "$testResultsDir.absolutePath" ]
}

clean.dependsOn(':liberty-starter-wlpcfg:cleanServer', 'karmaClean')
war.dependsOn(':liberty-filter-application:publishWar', ':starter-microservice-web:publishWar', ':starter-microservice-persistence:publishWar', ':starter-microservice-rest:publishWar', ':starter-microservice-websocket:publishWar', ':starter-microservice-springboot-web:publishWar', ':starter-microservice-watsonsdk:publishWar', ':starter-microservice-microprofile:publishWar', ':starter-microservice-ms-builder:publishWar', ':starter-microservice-swagger:publishWar', 'createSwaggerJSON')
installFeature.dependsOn('installLiberty')
libertyStart.dependsOn('installFeature', 'addServerEnv', ':starter-microservice-test:publishTestWar', 'publishWar')
localRun.dependsOn('installFeature', 'publishWar')
testAvailability.dependsOn('libertyStart', 'karmaRun')
fvt.dependsOn('testAvailability', 'libertyStart', 'testClasses')
fvt.finalizedBy('libertyStop', 'removeServerEnv')
check.dependsOn('karmaRun', 'fvt')
build.dependsOn('libertyPackage')
libertyPackage.dependsOn('publishWar', 'cleanDropins')
apply from: rootProject.file('only-run-liberty-start-if-fvt-is-not-up-to-date.gradle')